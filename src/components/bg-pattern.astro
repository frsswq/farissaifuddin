---

---

<canvas id="backgroundCanvas"></canvas>

<style>
	canvas {
		position: fixed;
		top: 0;
		left: 0;
		z-index: -1;
		pointer-events: none;
		image-rendering: optimizeSpeed;
	}
</style>

<script>
	const backgroundCanvas: HTMLCanvasElement | null = document.getElementById(
		"backgroundCanvas"
	) as HTMLCanvasElement;

	function drawOval(
		ctx: CanvasRenderingContext2D,
		x: number,
		y: number,
		width: number,
		height: number
	): void {
		ctx.beginPath();
		ctx.ellipse(x, y, width / 2, height / 2, 0, 0, 2 * Math.PI);
		ctx.fill();
	}

	function setupCanvas() {
		if (!backgroundCanvas) return null;

		const ctx: CanvasRenderingContext2D | null = backgroundCanvas.getContext("2d");
		if (!ctx) return null;

		const dpr = window.devicePixelRatio || 1;
		const width = window.innerWidth;
		const height = window.innerHeight;

		backgroundCanvas.width = width * dpr;
		backgroundCanvas.height = height * dpr;
		backgroundCanvas.style.width = width + "px";
		backgroundCanvas.style.height = height + "px";

		ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
		return { ctx, width, height };
	}

	function drawCanvasPattern(): void {
		if (!backgroundCanvas) return;

		const cacheKey = `canvas-pattern-${window.innerWidth}x${window.innerHeight}`;
		const cached = sessionStorage.getItem(cacheKey);

		if (cached) {
			const img = document.createElement("img") as HTMLImageElement;
			img.onload = () => {
				const setup = setupCanvas();
				if (setup) {
					setup.ctx.drawImage(img, 0, 0);
				}
			};
			img.src = cached;
			return;
		}

		const setup = setupCanvas();
		if (!setup) return;

		const { ctx, width, height } = setup;

		ctx.fillStyle = "#ffffff";
		ctx.fillRect(0, 0, width, height);

		const ovalWidth = 1.6;
		const ovalHeight = 3;
		const columnSpacing = 4;
		const rowSpacing = 5;
		const offsetY = 2.5;

		ctx.fillStyle = "#000000";

		for (let x = -columnSpacing; x <= width + columnSpacing; x += columnSpacing) {
			for (let y = -rowSpacing; y <= height + rowSpacing; y += rowSpacing) {
				drawOval(ctx, x, y, ovalWidth, ovalHeight);
				drawOval(ctx, x + columnSpacing / 2, y + offsetY, ovalWidth, ovalHeight);
			}
		}

		try {
			const dataURL = backgroundCanvas.toDataURL();
			sessionStorage.setItem(cacheKey, dataURL);
		} catch (e) {
			console.warn("Failed to cache canvas pattern");
		}
	}

	drawCanvasPattern();

	let resizeTimeout: number;

	window.addEventListener("resize", (): void => {
		clearTimeout(resizeTimeout);
		resizeTimeout = window.setTimeout(() => {
			if (backgroundCanvas.style.display !== "none") {
				drawCanvasPattern();
			}
		}, 300);
	});
</script>
